#pragma once
#include <string>

#include <librepr/customization.h>
#include <librepr/type_info.h>
#include <librepr/visit.h>
#include <librepr/visitors/repr.h>
#include <librepr/visitors/cpp.h>
#include <librepr/visitors/python.h>
#include <librepr/visitors/layout.h>


namespace librepr {
struct ReprWrapper {
  template <typename T>
  std::string operator()(T const& obj, Options options = {}) const {
    //TODO this could be static once msvc supports it
    auto visitor = ReprVisitor{options};
    librepr::visit(visitor, obj);
    return visitor.result.extract();
  }
};

enum class Language { CPP, Python };

template <typename T, Language language = Language::CPP>
std::string code_for() {
  if constexpr (language == Language::Python) {
    auto visitor = librepr::PythonVisitor{};
    librepr::visit<T>(visitor);
    return visitor.result.extract();
  }
  auto visitor = librepr::CppVisitor{};
  librepr::visit<T>(visitor);
  return visitor.result.extract();
}

template <typename T>
std::string layout_of() {
  auto visitor = librepr::LayoutVisitor();
  librepr::visit<T>(visitor);
  return visitor.result.extract();
}
}  // namespace librepr


inline constexpr librepr::ReprWrapper repr {};

template <typename T>
inline constexpr librepr::TypeName<T> nameof {};