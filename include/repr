#pragma once
#include <string>

#include <librepr/customization.h>
#include <librepr/type_info.h>
#include <librepr/visitors/repr.h>
#include <librepr/visit.h>
#include <type_traits>

#include <iostream>
namespace librepr {
struct ReprWrapper {
  template <typename T>
  std::string operator()(T const& obj, Options options = {}) const {
    //TODO this could be static once msvc supports it
    auto visitor = ReprVisitor{options};
    librepr::visit(visitor, obj);
    return visitor.result.extract();
  }
};
}  // namespace librepr


inline constexpr librepr::ReprWrapper repr {};

template <typename T>
inline constexpr librepr::TypeName<T> nameof {};