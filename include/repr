#pragma once
#include <string>

#include <librepr/customization.h>
#include <librepr/type_info.h>
#include <librepr/visit.h>
#include <librepr/visitors/repr.h>
#include <librepr/visitors/cpp.h>
#include <librepr/visitors/python.h>
#include <librepr/visitors/layout.h>

namespace librepr {
/** Niebloid helper class
 */
struct ReprWrapper {
  /** Returns a reconstructible string representation of the given object.
      @tparam T
      @param obj The object to inspect
      @param options Optional printing Options
      @return std::string
   */
  template <typename T>
  std::string operator()(T const& obj, Options options = {}) const {
    // TODO this could be static once msvc supports it
    auto visitor = ReprVisitor{options};
    librepr::visit(visitor, obj);
    return visitor.result.extract();
  }
};

enum class Language { CPP, Python };

/** Prints code roughly matching the requested type
    @tparam T The type to print
    @tparam language Which language to print the type in

*/
template <typename T, Language language = Language::CPP>
std::string code_for() {
  if constexpr (language == Language::Python) {
    auto visitor = librepr::PythonVisitor{};
    librepr::visit<T>(visitor);
    return visitor.result.extract();
  }
  auto visitor = librepr::CppVisitor{};
  librepr::visit<T>(visitor);
  return visitor.result.extract();
}

template <typename T>
std::string layout_of() {
  auto visitor = librepr::LayoutVisitor();
  librepr::visit<T>(visitor);
  return visitor.result.extract();
}
}  // namespace librepr

inline constexpr librepr::ReprWrapper
    repr{}; /**< Returns a reconstructable string representation of the given object. */

template <typename T>
inline constexpr librepr::TypeName<T> nameof{};