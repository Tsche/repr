name: CI

on:
  workflow_dispatch:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test-runtime:
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang]
        os: [ubuntu-latest, macos-13, windows-latest]
        include:
        - compiler: gcc
          os: ubuntu-latest
        - compiler: msvc
          os: windows-latest

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@v1.2

    - name: Set up Conan profile
      run: |
        conan config install https://github.com/Tsche/github-conan-profiles.git -sf=${{ matrix.os }}

    - name: Build
      run: conan build . -s build_type=Debug --build=missing -pr ${{ matrix.compiler }} -pr:b ${{ matrix.compiler }}

    - name: Test Package
      run: |
        conan editable add .
        conan test test_package repr/0.1 -s build_type=Debug -pr ${{ matrix.compiler }} -pr:b ${{ matrix.compiler }}

    - name: Test
      continue-on-error: true
      run: |
        ./build/Debug/repr_test

  test-compiletime:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

  benchmark-runtime:
    runs-on: ubuntu-latest
    container: alpine:latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Install dependencies
      run: |
        apk update
        apk add --no-cache git clang17 gcc

  benchmark-compiletime:
    runs-on: ubuntu-latest
    container: alpine:latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        apk update
        apk add --no-cache util-linux clang17 git bash python3 py3-pip
  
    - name: Setup palgen
      run: |
        pip3 install git+https://github.com/palliate/palgen.git@master --break-system-packages
        pip3 install -r tools/requirements.txt --break-system-packages

    - name: Print Clang version
      run: clang++ --version

    - name: Run benchmarks
      run: palgen --debug benchmark --cpu 0

    - uses: actions/upload-artifact@v4
      with:
        name: benchmark
        path: build/benchmark

  amalgamate-header:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup palgen
      uses: palliate/palgen@master
      with:
        run: false
        requirements: tools/requirements.txt

    - name: Run header amalgamation
      run: palgen --debug amalgamate

    - uses: actions/upload-artifact@v4
      with:
        name: amalgamated
        path: build/amalgamated.h

  sonarcloud:
    needs: [test-compiletime, test-runtime]
    runs-on: ubuntu-latest

    steps:
    - name: Set up gcovr
      run: |
        sudo pip install -U gcovr

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@v1.2

    - name: Set up Conan profile
      run: |
        conan config install https://github.com/Tsche/github-conan-profiles.git -sf=ubuntu-latest

    - uses: actions/checkout@v3

    - name: Install sonar-scanner and build-wrapper
      uses: SonarSource/sonarcloud-github-c-cpp@v2.0.2

    - name: Build
      run: build-wrapper-linux-x86-64 --out-dir out conan build . -s build_type=Debug --build=missing -pr gcc -pr:b gcc -o coverage=True

    - name: Coverage
      run: |
        ./build/Debug/repr_test
        gcovr --verbose --gcov-executable gcov-13 --sonarqube coverage.xml --decisions -b --exclude-unreachable-branches

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: sonar-scanner --define sonar.cfamily.build-wrapper-output="out" --define sonar.coverageReportPaths=coverage.xml

  process-tests:
    needs: [test-compiletime, test-runtime]
    runs-on: ubuntu-latest
    container: alpine:latest
    steps:
    - name: Install dependencies
      run: |
        apk update
        apk add --no-cache git python3

  process-benchmarks:
    needs: [benchmark-compiletime, benchmark-runtime]
    runs-on: ubuntu-latest
    container: alpine:latest
    steps:
    - name: Install dependencies
      run: |
        apk update
        apk add --no-cache git bash python3 py3-pip

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup palgen
      run: |
        pip3 install git+https://github.com/palliate/palgen.git@master --break-system-packages
        pip3 install -r tools/requirements.txt --break-system-packages

    - uses: actions/download-artifact@v4
      with:
        name: benchmark
        path: build/commits/${{ github.sha }}

    - name: Generate graphs
      run: |
        git config --global --add safe.directory $PWD
        mv build/commits/${{ github.sha }} build/commits/${GITHUB_SHA::7}
        palgen --debug graphs --output build --input build/commits/${GITHUB_SHA::7}

    - uses: actions/upload-artifact@v4
      with:
        name: graphs
        path: build

  build-docs:
    needs: [
      amalgamate-header, 
      # process-tests, 
      process-benchmarks]
    runs-on: ubuntu-latest
    container: alpine:latest
    steps:
    - name: Install dependencies
      run: |
        apk update
        apk add --no-cache git doxygen graphviz font-liberation python3 py3-pydot bash py3-pip

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup palgen
      run: |
        pip3 install git+https://github.com/palliate/palgen.git@master --break-system-packages
        pip3 install -r tools/requirements.txt --break-system-packages

    - name: Generate docs
      run: |
        mkdir -p build/docs
        palgen --debug docs

    - uses: actions/upload-artifact@v4
      with:
        name: docs-web
        path: build/docs/html
  
  deploy-wiki:
    # process-tests,
    needs: [amalgamate-header, process-benchmarks]

    # only update results of master
    # if: success() && github.ref == 'refs/heads/master'
  
    concurrency:
      group: "wiki"
      cancel-in-progress: false

    environment: 
      name: wiki
      url: 'https://github.com/Tsche/repr/wiki'
    
    permissions:
      contents: write

    runs-on: ubuntu-latest
    container: alpine:latest
    steps:
    - name: Install dependencies
      run: |
        apk update
        apk add --no-cache git python3

    - uses: actions/checkout@v4
      with:
        repository: 'Tsche/repr.wiki'

    - uses: actions/download-artifact@v4
      with:
        name: graphs
        path: .

    - name: Update text database
      run: |
        git config --global --add safe.directory $PWD
        git config --global user.name 'CI'
        git config --global user.email '<>'

        git add .
        git commit -m "Results of ${GITHUB_SHA::7}"
        git push

  deploy-pages:
    needs: [build-docs, deploy-wiki]
    # only publish on master
    # if: success() && github.ref == 'refs/heads/master'

    concurrency:
      group: "pages"
      cancel-in-progress: false

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    permissions:
      contents: read
      pages: write
      id-token: write

    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: docs-web
        path: html

    - uses: actions/download-artifact@v4
      with:
        name: amalgamated
        path: html

    - name: List HTML root
      run: ls -la html

    - name: Setup Pages
      uses: actions/configure-pages@v4

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: html

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
